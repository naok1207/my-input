# 
# Copyright (c) 2009-2020 The TEBA Project. All rights reserved.
# 
# Redistribution and use in source, with or without modification, are
# permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# Author: Atsuhi Yoshida

# Definitions of special token types

@TOKEN => ".*+\n"
@ANY => "(?:@TOKEN)*?"

@_SPC => "SP.*+\n"
@_DIRE => "B_DIRE.*+\n(?>(?:@ANY)E_DIRE).*+\n"
@_SP => "@_SPC|@_DIRE"
@SP => "(?:@_SP)*+"


# struct reference in cast operators.
@_STRUCT_REF => "(?:B_(?:SUE|SCT|UN|EN)\s.*+\nRE_SUE\s+<\w+>\n(?:@_SPC)*+ID.*+\nE_(?:SUE|SCT|UN|EN).*+\n)"
# To avoid backtarck bomb, struct reference is need to be separated.

# the part of expression, declarator, declaration, statement
@_EXPR => "(?:ID|OP|[PA]_|LI|[BE]_(?:FR|CAST|P)|_[BE]_X|CA|RE_SUE|ATTR|PRE_(?:JOIN|S)|UNKNOWN).*+\n"


@_CPND => "B_CP\s+(#\w+).*+\n(?>(?:@_EXPR|@_STRUCT_REF|C_.*\n|@_SP)*+E_CP\s+\g{-1}.*+\n)"
#@_CPND => "B_CP.*+\n(?:@_EXPR|@_STRUCT_REF|C_.*\n|@_SP)*+E_CP.*+\n"
@_EXPRS => "(?:@_EXPR|@_STRUCT_REF|@_CPND)"

@ANYEXPR => "(?:@_SP|@_EXPRS)*?"
#@EXPR => "@_EXPR(?:@SP(?:@_EXPRS)+)*"

@_DECR => "(?:@_EXPR|[BE]_FD.*+\n)"
@_DECRS => "(?:@_DECR|@_STRUCT_REF|@_CPND)"
@ANYDECR => "(?:@_SP|@_DECRS)*?"
#@DECR => "(?:(?:ID|P_).*+\n)@ANYDECR"

@_DECL =>"@_DECR|(?:SC|RE_TD|[BE]_(?:DE|TD|SUE|SCT|EN|UN|CP)).*+\n"
@ANYDECL =>"(?:@_SP|@_DECL)*?"
#@DECL => "(?:(?:ID|P_|RE_(?:TD|SUE)).*\n)@ANYDECL"

@_STMT => "@_DECL|(?:C_|CT|RE_(?:JP|L)|[BE]_(?:ST|LB)).*+\n"

@ANYSTMT => "(?:@_SP|@_STMT)*?"

# condition expressions (inside of parentheses)
@ANYCOND => "(?:@_SP|@_EXPRS|(?:SC.*+\n))*?"

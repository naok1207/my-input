# 
# Copyright (c) 2009-2020 The TEBA Project. All rights reserved.
# 
# Redistribution and use in source, with or without modification, are
# permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# Author: Atsuhi Yoshida

# 02 right: ++, --, sizeof, &, *, +, - ~, !, ::, defined

# the expression (X) * (P) is ambiguous. If X is a type and P is pointer,
# the syntax tree becomes {(X) {* {(P)}}}. If X is not a type,
# it becomes { {(X)} * {(P)} } (multiplication).
# (T1)(T2)*p is also ambiguous. Without any information of type names,
# these ambiguities are not to be solved.

# op {expr} => { op2 (expr) }

@OP01 => "OP(?:\s+<(?:\+\+|\-\-|[~!]|sizeof|defined)>|_U\s+<(?:[-+\*\&]|::)>)\n"

# The following rules need to be repeated for support nesting.

{ $op:OP01 $sp:SP $bx#1:_B_X $any:ANYEXPR $ex#1:_E_X }
=> { ''#1:_B_X $op $sp $bx:B_P $any $ex:E_P ''#1:_E_X }

# cast opeators
{ $bc#1:B_CAST '(?>':X $any1:ANYEXPR $ec#1:E_CAST ')':X
  $sp:SP $bx2#2:_B_X $any2:ANYEXPR $ex2#2:_E_X }
=> { ''#1:_B_X $bc $any1 $ec $sp $bx2:B_P $any2 $ex2:E_P ''#1:_E_X }

# The above rules can be integerated into the following rule.
# But this rule is slower than the above.
#{ $[op: $:OP01 $| $#c:B_CAST '(?>':X $:ANYEXPR $#c:E_CAST ')':X $]
#  $sp:SP $b#1:_B_X $any:ANYEXPR $e#1:_E_X }
#=>> { ''#1:_B_X $op $sp $b:B_P $any $e:E_P ''#1:_E_X }

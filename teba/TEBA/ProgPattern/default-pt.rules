# 
# Copyright (c) 2009-2020 The TEBA Project. All rights reserved.
# 
# Redistribution and use in source, with or without modification, are
# permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
# 
# Author: Atsuhi Yoshida

## Types for Pattern Variables
##
## Note: The following definitions are still experimental.
##       Please feed back to the auther if you modify and add definitions.

# ANY: any tokens
@ANY => "(?:.*+\n)*?"

# SP: spaces, newlines and comments
@_SP =>"SP.*+\n"
@SP  => "(?:@_SP)*?"

# Identifier
@ID => "ID.*+\n"
@VAR => "ID_(?:VF|MB|MC).*+\n"
@FNAME => "(?:IDN|ID_VF).*\n(?:@SP(?:PRE_JOIN.*\n)@SP(?:IDN|ID_VF|ID_TP).*\n)*+"

# EXPR: an expression
@_STRUCT_REF => "(?:B_(?:SUE|SCT|UN|EN).*+\n(?>(?:@ANY)E_(?:SUE|SCT|UN|EN).*+\n))"

@_EXPR => "(?:ID|OP|[PA]_|CA|LI|[BE]_(?:FR|CAST|P)).*+\n|@_STRUCT_REF"
@EXPR => "(?:(?:@_EXPR)(?:@_EXPR|@_SP)*?)?"

# DECR: a declarator
@_DECR => "@_EXPR|(?:C_|[BE]_CP).*+\n"
#@DECR => "(?:@_DECR)(?:(?:@_SP)*(?:@_DECR))*"
@DECR => "(?:@_DECR)(?:@_DECR|@_SP)*"

# _STMT: elements of statements
@_STMT => "@_DECR|(?:SC|B|E|ATTR|RE|CT).*+\n"

@STMT => "B_ST\s+(?<#_ST>#\w+)\s.*+\n(?>(?:@ANY)E_ST\s+\k<#_ST>\s.*+\n)"
@DECL => "B_DE\s+(?<#_DE>#\w+)\s.*+\n(?>(?:@ANY)E_DE\s+\k<#_DE>\s.*+\n)"
@FUNCDEF => "B_FUNC\s+(?<#_FU>#\w+)\s.*+\n(?>(?:@ANY)E_FUNC\s+\k<#_FU>\s.*+\n)"
#@STMT => "B_ST\s+(#\w+)\s.*+\n(?>(?:@_STMT|@_SP)*?E_ST\s+\g{-1}\s.*+\n)"
#@DECL => "B_DE\s+(#\w+)\s.*+\n(?>(?:@_STMT|@_SP)*E_DE\s+\g{-1}\s.*+\n)"

# TYPE: token sequences of a type (not supporting enum and union)
@_TYPE => "(?:(?:ID_(?:TP|TAG)|[BE]_SCT).*?\n|RE_SUE\s+<struct>\n)"
@TYPE => "@_TYPE(?:(?:SP.*?\n)*@_TYPE)*"

# Argument List
@ARGLIST => "@EXPR"

@_DIRE => "B_DIRE.*+\n(?>(?:@ANY)E_DIRE).*+\n"
@DIRE => "@_DIRE"
